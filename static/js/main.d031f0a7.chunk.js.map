{"version":3,"sources":["components/custom-methods/isPomodoro.js","components/Header.js","components/todolist-components/AddTask.js","components/todolist-components/EditTask.js","components/custom-methods/formatTime.js","icons/timer.svg","icons/timer-active.svg","icons/edit.svg","icons/delete.svg","components/todolist-components/Task.js","components/todolist-components/Tasks.js","components/custom-hooks/useTasksManager.js","components/TodoList.js","components/timer-components/Counter.js","icons/reset.svg","components/timer-components/Controls.js","components/timer-components/TimerStage.js","components/custom-methods/findAngleWithThreeSides.js","components/timer-components/TimerCycle.js","components/custom-methods/setInitialStages.js","components/custom-methods/calcStagesOffsets.js","components/custom-methods/offsetProgressBar.js","components/Timer.js","components/custom-hooks/useTimerManager.js","App.js","reportWebVitals.js","index.js"],"names":["isPomodoro","currentTimer","initialTimer","Header","changeTimerSettings","timerInitialSettings","useState","timerTitile","setTimerTitle","isTimerFormActive","setIsTimerFormActive","workSessionsCount","setWorkSessionsCount","workDuraton","setWorkDuration","sBreakDuration","setSBreakDuration","lBreakDuration","setLBreakDuration","className","onSubmit","e","preventDefault","newSettings","alert","type","value","onChange","parseInt","target","min","onClick","AddTask","onAdd","text","setText","id","Math","random","toString","substr","content","isActive","trackedTime","isCompleted","placeholder","onFocus","onBlur","EditTask","currentTask","onEdit","onCancel","editedTask","formatTime","seconds","isMoreThanHour","currentHours","floor","currentMin","currentSec","Task","task","isTracking","getChanges","changeTrigger","alt","actionCode","currentTarget","checked","src","trackingIcon","aria-describedby","role","timerIcon","editIcon","deleteIcon","Tasks","tasks","map","useTasksManager","defaultValue","key","currentValue","localStorage","getItem","JSON","parse","setValue","useEffect","setItem","stringify","TodoList","getTrackedTask","time","isAddFildAcitve","setIsAddFieldActive","setTasks","tasksRef","useRef","current","setCurrentTask","currTaskRef","isCurrTaskTracking","setIsCurrTaskTracking","setTaskCallback","useCallback","newTasks","filter","t","undefined","length","lastActiveTask","deactivatedTask","Counter","totalTime","Controls","reset","manageTimerState","isTimerStarted","resetIcon","TimerStage","stageName","duration","position","stageRadius","style","cx","cy","r","x","y","textAnchor","alignmentBaseline","dominantBaseline","findAngleWithThreeSides","side1","side2","side3","cosAngle1","pow","acos","PI","TimerCycle","stagesArray","radius","progressBarLength","offset","stagesCount","stageDegrees","correctionAngleDeg","progressBarEndX","sin","progressBarEndY","cos","viewBox","xmlns","strokeDasharray","d","strokeDashoffset","cycle","stagesCounter","i","name","radians","transform","push","createStages","item","setInitialStages","workSessions","workTime","shortBreak","longBreak","stagesDurations","calcStagesOffsets","stagesArr","stageArc","newArr","offsetValue","offsetProgressBar","stagesOffsets","currentStagesDurationArr","progress","Timer","shortBreakDuration","longBreakDuration","getTimerStage","trackingTaskText","resetTotalTime","totalTimeRef","resetStages","stagesRef","counterCurrentState","setCounterCurrentState","countRef","isTimerActive","setIsTimerActive","timerStateRef","stagesState","setStagesState","stagesStateRef","currentStage","setCurrentStage","stageIdRef","progressBarState","round","abs","getTimerStageCallback","intervalID","setInterval","currStageArr","stageTime","currCounter","clearInterval","currentTimerState","resetTimer","progressBarRadius","useTimerManager","sessionStorage","App","timerSettings","setTimerSettings","setWorkSessions","trackingTask","setTrackingTask","setTime","arr","isTimerInWorkSession","newTask","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d031f0a7.chunk.js","sourcesContent":["const isPomodoro = (currentTimer, initialTimer) => {\r\n    if (currentTimer[0] !== initialTimer[0] ||\r\n        currentTimer[1] !== initialTimer[1] ||\r\n        currentTimer[2] !== initialTimer[2]) {\r\n        return false\r\n    }\r\n\r\n    return true\r\n}\r\n\r\nexport default isPomodoro","import { useState } from 'react'\r\nimport isPomodoro from './custom-methods/isPomodoro'\r\n\r\nconst Header = ({ changeTimerSettings, timerInitialSettings }) => {\r\n    const [timerTitile, setTimerTitle] = useState('Pomodoro Timer')\r\n    const [isTimerFormActive, setIsTimerFormActive] = useState(false)\r\n    const [workSessionsCount, setWorkSessionsCount] = useState(timerInitialSettings[0])\r\n    const [workDuraton, setWorkDuration] = useState(timerInitialSettings[1])\r\n    const [sBreakDuration, setSBreakDuration] = useState(timerInitialSettings[2])\r\n    const [lBreakDuration, setLBreakDuration] = useState(timerInitialSettings[3])\r\n\r\n\r\n    const openTimerForm = () => {\r\n        setIsTimerFormActive(true)\r\n        setTimerTitle('Custom Timer')\r\n    }\r\n\r\n    const setDefaultTimer = () => {\r\n        changeTimerSettings(timerInitialSettings)\r\n        setWorkSessionsCount(timerInitialSettings[0])\r\n        setWorkDuration(timerInitialSettings[1])\r\n        setSBreakDuration(timerInitialSettings[2])\r\n        setLBreakDuration(timerInitialSettings[3])\r\n        setTimerTitle('Pomodoro Timer')\r\n    }\r\n\r\n    const onSubmit = (e) => {\r\n        e.preventDefault()\r\n\r\n        if (!workSessionsCount || !workDuraton || !sBreakDuration || !lBreakDuration) {\r\n            alert('Please, fill all fields')\r\n            return\r\n        }\r\n\r\n        const newSettings = [workSessionsCount, workDuraton, sBreakDuration, lBreakDuration]\r\n\r\n        changeTimerSettings(newSettings)\r\n\r\n        setIsTimerFormActive(false)\r\n\r\n        isPomodoro(newSettings, timerInitialSettings) ?\r\n            setTimerTitle('Pomodoro Timer') :\r\n            setTimerTitle('Custom Timer')\r\n    }\r\n\r\n    const onCancel = () => {\r\n        setIsTimerFormActive(false)\r\n\r\n        isPomodoro([workSessionsCount, workDuraton, sBreakDuration, lBreakDuration], timerInitialSettings) &&\r\n            setTimerTitle('Pomodoro Timer')\r\n    }\r\n\r\n    return (\r\n        <header className='header'>\r\n            <h1>{timerTitile}</h1>\r\n            {isTimerFormActive ?\r\n                (\r\n                    <form className='set-timer-form' onSubmit={onSubmit}>\r\n                        <div className='set-timer-fields'>\r\n                            <div className='field'>\r\n                                <label>Work Sessions</label>\r\n                                <input\r\n                                    type='number'\r\n                                    value={workSessionsCount}\r\n                                    onChange={(e) => setWorkSessionsCount(parseInt(e.target.value))}\r\n                                    min='1'\r\n                                />\r\n                            </div>\r\n                            <div className='field'>\r\n                                <label>Work Duration</label>\r\n                                <input\r\n                                    type='number'\r\n                                    value={workDuraton}\r\n                                    onChange={(e) => setWorkDuration(parseInt(e.target.value))}\r\n                                    min='1'\r\n                                />\r\n                            </div>\r\n                            <div className='field'>\r\n                                <label>Short Break Duration</label>\r\n                                <input\r\n                                    type='number'\r\n                                    value={sBreakDuration}\r\n                                    onChange={(e) => setSBreakDuration(parseInt(e.target.value))}\r\n                                    min='1'\r\n                                />\r\n                            </div>\r\n                            <div className='field'>\r\n                                <label>Long Break Duration</label>\r\n                                <input\r\n                                    type='number'\r\n                                    value={lBreakDuration}\r\n                                    onChange={(e) => setLBreakDuration(parseInt(e.target.value))}\r\n                                    min='1'\r\n                                />\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div>\r\n                            <input type='submit' value='Save Timer' />\r\n                            <input type='button' value='Cancel' onClick={onCancel} />\r\n                        </div>\r\n                    </form>\r\n                ) : (\r\n                    <div>\r\n                        <button onClick={setDefaultTimer}>Default</button>\r\n                        <button onClick={openTimerForm}>Set Custom Timer</button>\r\n                    </div>\r\n                )\r\n            }\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header","import { useState } from 'react'\r\n\r\nconst AddTask = ({ onAdd }) => {\r\n    const [text, setText] = useState('')\r\n\r\n    const onSubmit = (e) => {\r\n        e.preventDefault()\r\n\r\n        if(!text) {\r\n            alert('Please add a task')\r\n            return\r\n        }\r\n\r\n        const id = Math.random().toString(16).substr(2, 9)\r\n        const isActive = false\r\n        const trackedTime = 0\r\n        const isCompleted = false\r\n\r\n        onAdd({id, content: text, isActive, trackedTime, isCompleted})\r\n\r\n        setText('')\r\n    }\r\n\r\n    return (\r\n        <form className='add-form' onSubmit={onSubmit}>\r\n            <input\r\n                type='text'\r\n                value={text}\r\n                onChange={(e) => setText(e.target.value)}\r\n                placeholder='What is your goal?'\r\n                onFocus={(e) => {e.target.placeholder = ''}}\r\n                onBlur={(e) => {e.target.placeholder = 'What is your goal?'}}\r\n            /><input type='submit' value='Save' />\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default AddTask","import { useState } from 'react'\r\n\r\nconst EditTask = ({ currentTask, onEdit, onCancel }) => {\r\n    const [text, setText] = useState(currentTask.content)\r\n\r\n    const submitChanges = (e) => {\r\n        e.preventDefault()\r\n\r\n        const editedTask = currentTask\r\n        editedTask.content = text\r\n\r\n        onEdit(editedTask)\r\n        onCancel()\r\n    }\r\n\r\n    return (\r\n        <form className='edit-form' onSubmit={submitChanges}>\r\n            <label>Edit Task</label>\r\n            <input\r\n                type=\"text\"\r\n                value={text}\r\n                onChange={(e) => { setText(e.target.value) }}\r\n            />\r\n            <input type=\"submit\" value='Save Changes' />\r\n            <input\r\n                type=\"button\"\r\n                value='Cancel'\r\n                onClick={() => { onCancel() }}\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default EditTask","const formatTime = (seconds, isMoreThanHour) => {\r\n    let currentHours = 0\r\n    \r\n    if(isMoreThanHour) {\r\n        currentHours = Math.floor(seconds / (60 * 60))\r\n    }\r\n    const currentMin = Math.floor((seconds % (60 * 60)) / 60)\r\n    const currentSec = Math.floor((seconds % (60 * 60)) % 60)\r\n\r\n    return (\r\n        (isMoreThanHour ?\r\n            ((currentHours > 9 ? \r\n                currentHours.toString() : \r\n                '0' + currentHours.toString()) + ':') :\r\n            '') +\r\n        (currentMin > 9 ? currentMin.toString() : '0' + currentMin.toString()) + ':' +\r\n        (currentSec > 9 ? currentSec.toString() : '0' + currentSec.toString())\r\n    )\r\n}\r\n\r\nexport default formatTime","export default __webpack_public_path__ + \"static/media/timer.32dc4364.svg\";","export default __webpack_public_path__ + \"static/media/timer-active.3fdd8705.svg\";","export default __webpack_public_path__ + \"static/media/edit.89010b86.svg\";","export default __webpack_public_path__ + \"static/media/delete.b075d129.svg\";","import formatTime from '../custom-methods/formatTime'\r\nimport timerIcon from '../../icons/timer.svg'\r\nimport trackingIcon from '../../icons/timer-active.svg'\r\nimport editIcon from '../../icons/edit.svg'\r\nimport deleteIcon from '../../icons/delete.svg'\r\n\r\nconst Task = ({ task, isTracking, onChange }) => {\r\n    const getChanges = (e) => {\r\n        const changeTrigger = e.target.alt\r\n        let actionCode = ''\r\n\r\n        if (changeTrigger === '') {\r\n            task.isCompleted = e.currentTarget.checked\r\n            actionCode = 'complete'\r\n        } else if (changeTrigger === 'Track task') {\r\n            actionCode = 'start-track'\r\n        } else if (changeTrigger === 'Stop tracking task') {\r\n            actionCode = 'stop-track'\r\n        } else if (changeTrigger === 'Edit task') {\r\n            actionCode = 'edit'\r\n        } else if (changeTrigger === 'Delete task') {\r\n            actionCode = 'delete'\r\n        }\r\n\r\n        // isCurrentTaskTimerOn = isTaskTimerOn\r\n        onChange(task, actionCode)\r\n    }\r\n\r\n    return (\r\n        <div className={`task \r\n                        ${task.isActive ? 'active-task' : 'waiting'} \r\n                        ${task.isCompleted ? 'completed' : ''}`}>\r\n            <div className='status-marker'></div>\r\n            <div className='task-text-and-state'>\r\n                <div className='task-content'>\r\n                    <p>{task.content}</p>\r\n                </div>\r\n                <div className='task-state'>\r\n                    <label className='complete-btn'>\r\n                        <input\r\n                            type='checkbox'\r\n                            checked={task.isCompleted}\r\n                            onChange={getChanges}\r\n                        />\r\n                        <span className='checkmark'></span>\r\n                        <span className='status'>\r\n                            {task.isCompleted ? 'Completed' :\r\n                                (task.isActive ? 'Active' : 'Waiting')}\r\n                        </span>\r\n                        <span className='time'>{formatTime(task.trackedTime)}</span>\r\n                        <span className='time-label'>Tracked time</span>\r\n                    </label>\r\n                </div>\r\n            </div>\r\n            <div className='task-buttons'>\r\n                {isTracking ?\r\n                    <button className='icon stop-track' onClick={getChanges}>\r\n                        <img src={trackingIcon} alt='Stop task tracking' aria-describedby='notification-label' />\r\n                        <div role='tooltip' id='notification-label'>Stop tracking</div>\r\n                    </button> :\r\n                    <button className='icon start-track' onClick={getChanges}>\r\n                        <img src={timerIcon} alt='Track task' aria-describedby='notification-label' />\r\n                        <div role='tooltip' id='notification-label'>Start tracking</div>\r\n                    </button>\r\n                }\r\n                <button className='icon edit' onClick={getChanges}>\r\n                    <img src={editIcon} alt='Edit task' aria-describedby='notification-label' />\r\n                    <div role='tooltip' id='notification-label'>Edit</div>\r\n                </button>\r\n                <button className='icon delete' onClick={getChanges}>\r\n                    <img src={deleteIcon} alt='Delete task' aria-describedby='notification-label' />\r\n                    <div role='tooltip' id='notification-label'>Delete</div>\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Task","import Task from './Task'\r\n\r\nconst Tasks = ({ tasks, isTracking, onChange }) => {\r\n    return (\r\n        <div className='tasks'>\r\n            <div className='tasks-list-title'>\r\n                <p>Tasks</p>\r\n            </div>\r\n            <div className='tasks-list'>\r\n                {tasks.map((task) =>\r\n                    <Task\r\n                        key={task.id}\r\n                        task={task}\r\n                        isTracking={task.isActive ? isTracking : false}\r\n                        onChange={onChange}\r\n                    />\r\n                )}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Tasks","import { useState, useEffect } from 'react'\r\n\r\n// Custom hook stolen from \"https://www.joshwcomeau.com/react/persisting-react-state-in-localstorage/\"\r\nconst useTasksManager = (defaultValue, key) => {\r\n    const [value, setValue] = useState(() => {\r\n        const currentValue = localStorage.getItem(key)\r\n\r\n        return currentValue !== null ? \r\n            JSON.parse(currentValue) : \r\n            defaultValue\r\n    })\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(key, JSON.stringify(value))\r\n    }, [key, value])\r\n\r\n    return [value, setValue]\r\n}\r\n\r\nexport default useTasksManager","import { useCallback, useEffect, useRef, useState } from 'react'\r\nimport AddTask from './todolist-components/AddTask'\r\nimport EditTask from './todolist-components/EditTask'\r\nimport Tasks from './todolist-components/Tasks'\r\nimport useTasksManager from './custom-hooks/useTasksManager'\r\n\r\nconst TodoList = ({ getTrackedTask, time }) => {\r\n    const [isAddFildAcitve, setIsAddFieldActive] = useState(true)\r\n    const [tasks, setTasks] = useTasksManager('', 'tasks')\r\n    const tasksRef = useRef(tasks)\r\n    tasksRef.current = tasks\r\n    const [currentTask, setCurrentTask] = useState()\r\n    const currTaskRef = useRef(currentTask)\r\n    currTaskRef.current = currentTask\r\n    const [isCurrTaskTracking, setIsCurrTaskTracking] = useState(false)\r\n\r\n    const addTask = (task) => {\r\n        setTasks([...tasks, task])\r\n    }\r\n\r\n    const setTaskCallback = useCallback(() => {\r\n        const newTasks = [...tasksRef.current]\r\n        newTasks.filter(t => t.id === currTaskRef.current.id).trackedTime = \r\n        currTaskRef.current.trackedTime\r\n        setTasks(newTasks)\r\n    }, [setTasks])\r\n\r\n    useEffect(() => {\r\n        if(currTaskRef.current !== undefined) {\r\n            setTaskCallback()\r\n        }\r\n    }, [time, setTaskCallback])\r\n    \r\n    // Save the changes of the edited task to the list of tasks\r\n    const changeTask = (task) => {\r\n        const newTasks = [...tasks]\r\n        newTasks.filter(t => t.id === task.id).content = task.content\r\n        setTasks(newTasks)\r\n    }\r\n\r\n    // Hide EditTask field after the current task change is submited or canceled\r\n    const hideEditMode = () => {\r\n        setIsAddFieldActive(true)\r\n    }\r\n\r\n    const getChangedTask = (task, actionCode) => {\r\n        if(currTaskRef.current === undefined) {\r\n            let lastActiveTask = tasksRef.current.filter(t => t.isActive === true)[0]\r\n            lastActiveTask && (lastActiveTask.isActive = false)\r\n        }\r\n\r\n        if(currTaskRef.current !== undefined && currTaskRef.current !== task) {\r\n            let deactivatedTask = currTaskRef.current\r\n            deactivatedTask.isActive = false\r\n            setCurrentTask(deactivatedTask)\r\n        }\r\n\r\n        task.isActive = true\r\n\r\n        if(actionCode !== 'start-track') {\r\n            setIsCurrTaskTracking(false)\r\n            getTrackedTask(undefined)\r\n        }\r\n\r\n        if(actionCode === 'complete') {\r\n            const newTasks = [...tasks]\r\n            newTasks.filter(t => t.id === task.id).isCompleted = task.isCompleted\r\n            setTasks(newTasks)\r\n        } else if(actionCode === 'start-track') {\r\n            setIsCurrTaskTracking(true)\r\n            getTrackedTask(task)\r\n        // } else if(actionCode === 'stop-track') {\r\n        //     setIsCurrTaskTracking(false)\r\n        //     getTrackedTask(undefined)\r\n        } else if(actionCode === 'edit') {\r\n            setIsAddFieldActive(false)\r\n            getTrackedTask(undefined)\r\n        } else if(actionCode === 'delete') {\r\n            setTasks(tasks.filter((t) => t.id !== task.id))\r\n        }\r\n\r\n        setCurrentTask(task)\r\n    }\r\n\r\n    return (\r\n        <div className='todolist-section'>\r\n            <div className='todolist'>\r\n                <div className='section-title'>\r\n                    <h2>To-do List</h2>\r\n                    <p>Set goals to track with the timer</p>\r\n                </div>\r\n\r\n                {isAddFildAcitve ? \r\n                    (<AddTask onAdd={addTask} />) : \r\n                    (<EditTask currentTask={currentTask} onEdit={changeTask} onCancel={hideEditMode} />)}\r\n\r\n                <div className={isAddFildAcitve ? '' : 'disabled'}>\r\n                    {tasks.length ?\r\n                        (<Tasks \r\n                            tasks={tasks}\r\n                            isTracking={isCurrTaskTracking}\r\n                            onChange={getChangedTask} />) :\r\n                        (<p>There's no items in the To-do List yet.</p>)}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoList","import formatTime from '../custom-methods/formatTime'\r\n\r\nconst Counter = ({ totalTime }) => {\r\n    return (\r\n        <div className='counter'>\r\n            <div className='total-time'>{formatTime(totalTime, totalTime > 59)}</div>\r\n            <p>Total time left</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Counter","export default __webpack_public_path__ + \"static/media/reset.e65ac108.svg\";","// import playIcon from '../../icons/play.svg'\r\n// import pauseIcon from '../../icons/pause.svg'\r\nimport resetIcon from '../../icons/reset.svg'\r\n\r\nconst Controls = ({ reset, manageTimerState, isTimerStarted }) => {\r\n    return (\r\n        <div className='controls'>\r\n            <div>\r\n                <button className='icon reset-btn' onClick={reset}>\r\n                    <img src={resetIcon} alt='Reset timer' aria-describedby='notification-label' />\r\n                    <div role='tooltip' id='notification-label'>Reset</div>\r\n                </button>\r\n                {isTimerStarted ?\r\n                    <button className='icon' onClick={manageTimerState}>\r\n                        {/* <img src={pauseIcon} alt='Pause timer' aria-describedby='notification-label' /> */}\r\n                        <div className='play-btn pause' aria-describedby='notification-label'></div>\r\n                        <div role='tooltip' id='notification-label'>Pause</div>\r\n                    </button> :\r\n                    <button className='icon' onClick={manageTimerState}>\r\n                        {/* <img src={playIcon} alt='Start timer' aria-describedby='notification-label' /> */}\r\n                        <div className='play-btn' aria-describedby='notification-label'></div>\r\n                        <div role='tooltip' id='notification-label'>Play</div>\r\n                    </button>\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Controls","import formatTime from '../custom-methods/formatTime'\r\n\r\nconst TimerStage = ({ id, stageName, duration, position, stageRadius }) => {\r\n    return (\r\n        <g id={id} className={`stage-container ${duration === 0 ? 'passed-time' : ''}`} style={position}>\r\n            <circle cx='50%' cy='50%' r={stageRadius} />\r\n            <text className='stage-name' x='50%' y='50%' textAnchor='middle' alignmentBaseline='central' dominantBaseline='central'>\r\n                {stageName}\r\n            </text>\r\n            <text className='stage-time' x='50%' y='50%' textAnchor='middle' alignmentBaseline='central' dominantBaseline='central'>\r\n                {formatTime(duration, duration > 59 * 60)}\r\n            </text>\r\n        </g>\r\n    )\r\n}\r\n\r\nexport default TimerStage","// The Law of Cosines\r\nconst findAngleWithThreeSides = (side1, side2, side3) => {\r\n    let cosAngle1 = (Math.pow(side2, 2) + Math.pow(side3, 2) - Math.pow(side1, 2)) / (2 * side2 * side3)\r\n\r\n    return (Math.acos(cosAngle1) * (180 / Math.PI))\r\n}\r\n\r\nexport default findAngleWithThreeSides","import TimerStage from './TimerStage'\r\nimport findAngleWithThreeSides from '../custom-methods/findAngleWithThreeSides'\r\n\r\nconst TimerCycle = ({ stagesArray, radius, stageRadius, progressBarLength, offset }) => {\r\n    const stagesCount = stagesArray.length\r\n    const stageDegrees = 360 / (stagesCount + 1)\r\n    const progressBarPadding = 8\r\n    const correctionAngleDeg = findAngleWithThreeSides(stageRadius, radius, radius)\r\n    const progressBarEndX = Math.sin((stageDegrees) * (Math.PI / 180)) * radius\r\n    const progressBarEndY = Math.cos((stageDegrees) * (Math.PI / 180)) * radius\r\n\r\n    const createStages = () => {\r\n        let cycle = []\r\n        let stagesCounter = 1\r\n\r\n        for (let i = 0; i < stagesCount; i++) {\r\n            let name\r\n            let time = stagesArray[i]\r\n            const degrees = (stageDegrees * stagesCounter) + 180 - correctionAngleDeg + 1  // +1 is to hide the round stroke-linecap at the end\r\n            const radians = degrees * (Math.PI / 180) * (-1) // -1 turn stages sequence clockwise\r\n            const position = {\r\n                transform:\r\n                    `translateX(calc(${Math.sin(radians) * radius}px)) \r\n                    translateY(calc(${Math.cos(radians) * radius}px))`\r\n            }\r\n\r\n            if (i % 2 === 0) {\r\n                name = 'Work'\r\n            } else if (i === stagesCount - 1) {\r\n                name = 'Long Break'\r\n            } else {\r\n                name = 'Break'\r\n            }\r\n\r\n            cycle.push(\r\n                <TimerStage\r\n                    key={stagesCounter.toString()}\r\n                    id={stagesCounter}\r\n                    stageName={name}\r\n                    duration={time}\r\n                    position={position}\r\n                    stageRadius={stageRadius}\r\n                />\r\n            )\r\n\r\n            stagesCounter++\r\n        }\r\n\r\n        return cycle\r\n    }\r\n\r\n    return (\r\n        <div className='timer-cycle'>\r\n            <svg viewBox=\"0 0 120 120\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                <circle\r\n                    className=\"circle-passive\"\r\n                    cx=\"50%\" cy=\"50%\" r={radius}\r\n                    strokeDasharray={progressBarLength}\r\n                />\r\n                <path\r\n                    className=\"circle-active\"\r\n                    d={`\r\n                        M${radius + progressBarPadding},${progressBarPadding} \r\n                        A${radius},${radius} 0 1,1 ${radius - progressBarEndX + progressBarPadding},${radius - progressBarEndY + progressBarPadding}\r\n                    `}\r\n                    strokeDasharray={progressBarLength}\r\n                    strokeDashoffset={offset}\r\n                />\r\n                {createStages().map((item) => item)}\r\n            </svg>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TimerCycle","const setInitialStages = (workSessions, workTime, shortBreak, longBreak) => {\r\n    let stagesDurations = []\r\n    const stagesCount = workSessions + (workSessions - 1) + 1\r\n\r\n    for (let i = 0; i < stagesCount; i++) {\r\n        let time\r\n\r\n        if (i % 2 === 0) { time = workTime }\r\n        else if (i === stagesCount - 1) { time = longBreak }\r\n        else { time = shortBreak }\r\n\r\n        stagesDurations.push(time)\r\n    }\r\n\r\n    return stagesDurations\r\n}\r\n\r\nexport default setInitialStages","const calcStagesOffsets = (stagesArr, stageArc) => {\r\n    let newArr = []\r\n\r\n    for(let i=0; i< stagesArr.length; i++) {\r\n        let offsetValue = stageArc / (stagesArr[i])\r\n        newArr.push(offsetValue)\r\n    }\r\n\r\n    return newArr\r\n}\r\n\r\nexport default calcStagesOffsets","const offsetProgressBar = (stagesOffsets, currentStagesDurationArr) => {\r\n    let progress = 0;\r\n\r\n    for(let i=0; i<stagesOffsets.length; i++) {\r\n        progress += stagesOffsets[i] * currentStagesDurationArr[i]\r\n    }\r\n\r\n    return progress\r\n}\r\n\r\nexport default offsetProgressBar","/**\r\n * Help material for Timer's start/pause/reset functionalities:\r\n * https://blog.greenroots.info/how-to-use-javascript-scheduling-methods-with-react-hooks-ckh1jzb0u01sg2ps1cvm4afzr\r\n */\r\n\r\nimport { useState, useRef, useEffect, useCallback } from 'react'\r\nimport Counter from './timer-components/Counter'\r\nimport Controls from './timer-components/Controls'\r\nimport TimerCycle from './timer-components/TimerCycle'\r\nimport setInitialStages from './custom-methods/setInitialStages'\r\nimport calcStagesOffsets from './custom-methods/calcStagesOffsets'\r\nimport offsetProgressBar from './custom-methods/offsetProgressBar'\r\n\r\nconst Timer = ({ workSessions, workDuraton, shortBreakDuration, longBreakDuration, getTimerStage, trackingTaskText }) => {\r\n    const resetTotalTime = workSessions * workDuraton +\r\n        (workSessions - 1) * shortBreakDuration + longBreakDuration\r\n    const totalTimeRef = useRef(resetTotalTime)\r\n    totalTimeRef.current = resetTotalTime\r\n\r\n    const resetStages = setInitialStages(workSessions, workDuraton, shortBreakDuration, longBreakDuration)\r\n    const stagesRef = useRef(resetStages)\r\n    stagesRef.current = resetStages\r\n\r\n    const [counterCurrentState, setCounterCurrentState] = useState(resetTotalTime)\r\n    const countRef = useRef(counterCurrentState)\r\n    countRef.current = counterCurrentState\r\n\r\n    const [isTimerActive, setIsTimerActive] = useState(false)\r\n    const timerStateRef = useRef(isTimerActive)\r\n    timerStateRef.current = isTimerActive\r\n\r\n    const [stagesState, setStagesState] = useState(resetStages)\r\n    const stagesStateRef = useRef(stagesState)\r\n    stagesStateRef.current = stagesState\r\n\r\n    const [currentStage, setCurrentStage] = useState(1)\r\n    const stageIdRef = useRef(currentStage)\r\n    stageIdRef.current = currentStage\r\n\r\n    const progressBarRadius = 52\r\n    const stageRadius = progressBarRadius / 6.5\r\n    const circleLength = 2 * Math.PI * progressBarRadius\r\n    const stageArc = circleLength / (stagesRef.current.length + 1)\r\n    const progressBarLength = stageArc * stagesRef.current.length\r\n    const stagesOffsets = calcStagesOffsets(stagesRef.current, stageArc)\r\n    const progressBarState = -Math.round(Math.abs(progressBarLength - offsetProgressBar(stagesOffsets, stagesStateRef.current)))\r\n\r\n    // Invoking getTimerStage function directly in useEffect causes \"missing dependency\" worning...  \r\n    // Turns out, it’s all down to the way Referential Equality works in JavaScript...\r\n    // https://pauldrummond.dev/posts/useeffect-and-exhaustive-deps/\r\n    const getTimerStageCallback = useCallback(() => {\r\n        getTimerStage(stageIdRef.current % 2 !== 0)\r\n    }, [getTimerStage])\r\n\r\n    useEffect(() => {\r\n        let intervalID\r\n\r\n        if (isTimerActive) {\r\n            intervalID = setInterval(() => {\r\n                // Refresh Stage counter\r\n                let currStageArr = stagesStateRef.current\r\n                let id = stageIdRef.current\r\n                let stageTime = currStageArr[id - 1]\r\n\r\n                if (stageTime > 0) {\r\n                    stageTime--\r\n                } else if (id < currStageArr.length) {\r\n                    setCurrentStage(++id)\r\n                    stageTime = currStageArr[id - 1]\r\n                    stageTime--\r\n                }\r\n\r\n                currStageArr[id - 1] = stageTime\r\n\r\n                setStagesState(currStageArr)\r\n\r\n                // Refresh Timer counter\r\n                let currCounter = countRef.current\r\n                setCounterCurrentState(--currCounter)\r\n\r\n                // Stop timer at 0\r\n                if (currCounter === 0) {\r\n                    clearInterval(intervalID)\r\n                    let currentTimerState = timerStateRef.current\r\n                    setIsTimerActive(!currentTimerState)\r\n                }\r\n\r\n                getTimerStageCallback()\r\n            }, 1000);\r\n\r\n        } else {\r\n            clearInterval(intervalID)\r\n        }\r\n\r\n        return () => clearInterval(intervalID)\r\n    }, [isTimerActive, getTimerStageCallback])\r\n\r\n    const resetTimer = () => {\r\n        setCounterCurrentState(totalTimeRef.current)\r\n        setStagesState(stagesRef.current)\r\n        setCurrentStage(1)\r\n        setIsTimerActive(false)\r\n    }\r\n\r\n    useEffect(() => {\r\n        resetTimer()\r\n    }, [workSessions, workDuraton, shortBreakDuration, longBreakDuration])\r\n\r\n    const manageTimerState = () => {\r\n        setIsTimerActive(!isTimerActive)\r\n\r\n        if (counterCurrentState === 0) {\r\n            setCounterCurrentState(resetTotalTime)\r\n            setStagesState(resetStages)\r\n            setCurrentStage(1)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='timer-section'>\r\n            <div className='timer-bckgr'></div>\r\n            <p className='tracking-task-text'>\r\n                {trackingTaskText ? trackingTaskText : 'There isn\\'t tracking task'}\r\n            </p>\r\n            <Counter totalTime={counterCurrentState} />\r\n            <Controls\r\n                reset={resetTimer}\r\n                manageTimerState={manageTimerState}\r\n                isTimerStarted={isTimerActive}\r\n            />\r\n            <TimerCycle\r\n                stagesArray={stagesState}\r\n                radius={progressBarRadius}\r\n                stageRadius={stageRadius}\r\n                progressBarLength={progressBarLength}\r\n                offset={progressBarState}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Timer","import { useState, useEffect } from 'react'\r\n\r\n// Custom hook stolen from \"https://www.joshwcomeau.com/react/persisting-react-state-in-localstorage/\"\r\nconst useTimerManager = (defaultValue, key) => {\r\n    const [value, setValue] = useState(() => {\r\n        const currentValue = sessionStorage.getItem(key)\r\n\r\n        return currentValue !== null ? \r\n            JSON.parse(currentValue) : \r\n            defaultValue\r\n    })\r\n\r\n    useEffect(() => {\r\n        sessionStorage.setItem(key, JSON.stringify(value))\r\n    }, [key, value])\r\n\r\n    return [value, setValue]\r\n}\r\n\r\nexport default useTimerManager","import { useState } from 'react'\nimport Header from './components/Header'\nimport TodoList from './components/TodoList'\nimport Timer from './components/Timer'\nimport useTimerManager from './components/custom-hooks/useTimerManager'\n\nfunction App() {\n  const timerInitialSettings = [3, 15, 5, 10]\n  const [timerSettings, setTimerSettings] = useTimerManager(timerInitialSettings, 'timer')\n  const [workSessions, setWorkSessions] = useState(timerSettings[0])\n  const [workDuraton, setWorkDuration] = useState(timerSettings[1])\n  const [sBreakDuration, setSBreakDuration] = useState(timerSettings[2])\n  const [lBreakDuration, setLBreakDuration] = useState(timerSettings[3])\n  const [trackingTask, setTrackingTask] = useState()\n  const [time, setTime] = useState()\n\n  const changeTimerSettings = (arr) => {\n    setTimerSettings(arr)\n    setWorkSessions(arr[0])\n    setWorkDuration(arr[1])\n    setSBreakDuration(arr[2])\n    setLBreakDuration(arr[3])\n  }\n\n  const setTimerStage = (isTimerInWorkSession) => {\n    if (trackingTask !== undefined && isTimerInWorkSession) {\n      let newTask = trackingTask\n      newTask.trackedTime++\n      setTrackingTask(trackingTask)\n      setTime(newTask.trackedTime)\n    }\n  }\n\n  const setTrackedTask = (task) => {\n    setTrackingTask(task)\n  }\n\n  return (\n    <div className='app'>\n      <Header\n        changeTimerSettings={changeTimerSettings}\n        timerInitialSettings={timerInitialSettings}\n      />\n      <div className='container'>\n        <Timer\n          workSessions={workSessions}\n          workDuraton={workDuraton}\n          shortBreakDuration={sBreakDuration}\n          longBreakDuration={lBreakDuration}\n          getTimerStage={setTimerStage}\n          trackingTaskText={trackingTask && trackingTask.content}\n        />\n        <TodoList\n          getTrackedTask={setTrackedTask}\n          time={time}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}